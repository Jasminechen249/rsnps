
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "solarius"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('solarius')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("availableTransforms")
> ### * availableTransforms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: availableTransforms
> ### Title: Get a list of available transforms.
> ### Aliases: availableTransforms
> 
> ### ** Examples
> 
> availableTransforms()
[1] "none"    "inormal" "log"     "out"    
> 
> 
> 
> cleanEx()
> nameEx("dat30")
> ### * dat30
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dat30
> ### Title: dat30 data set adapted from multic R package
> ### Aliases: dat30 genocovdat30 mapdat30
> 
> ### ** Examples
> 
> data(dat30)
> 
> str(dat30)
'data.frame':	174 obs. of  10 variables:
 $ famid : int  1 1 1 1 1 1 2 2 2 2 ...
 $ id    : int  11 12 13 14 15 16 21 22 23 24 ...
 $ fa    : int  0 0 11 11 11 11 0 0 21 21 ...
 $ mo    : int  0 0 12 12 12 12 0 0 22 22 ...
 $ sex   : int  1 2 1 2 1 1 1 2 2 1 ...
 $ affect: int  2 2 2 2 2 2 2 2 2 2 ...
 $ class : logi  NA NA NA NA NA NA ...
 $ trait1: num  11.96 7.1 10.32 9.76 9.46 ...
 $ trait2: num  13.58 5.37 6.4 8.98 9.21 ...
 $ age   : int  50 25 35 49 51 45 37 29 39 41 ...
> 
> plotPed(dat30, 2) # plot the pedigree tree for family #2
Loading required package: kinship2
Loading required package: Matrix
Warning: package ‘Matrix’ was built under R version 3.5.2
Loading required package: quadprog
Warning: package ‘quadprog’ was built under R version 3.5.2
> 
> ## Not run: 
> ##D kin2 <- solarKinship2(dat30)
> ##D plotKinship2(kin2)
> ##D plotKinship2(kin2[1:30, 1:30])
> ##D 
> ## End(Not run)
> str(genocovdat30)
 num [1:174, 1:100] 1.978 0.795 0.231 0.139 0.487 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:174] "11" "12" "13" "14" ...
  ..$ : chr [1:100] "snp_1" "snp_2" "snp_3" "snp_4" ...
> 
> genocovdat30[1:5, 1:5]
       snp_1      snp_2     snp_3     snp_4     snp_5
11 1.9778186 0.76066504 1.4619557 0.1212071 1.0959075
12 0.7954909 1.42966254 1.3746092 0.5010122 0.1454984
13 0.2313956 0.07411651 1.2020817 1.9940435 1.4228365
14 0.1394974 0.99711827 0.7149236 0.6051847 0.4434309
15 0.4874988 1.44298075 1.5332879 1.7050956 1.3768445
> str(mapdat30)
'data.frame':	100 obs. of  4 variables:
 $ SNP : Factor w/ 100 levels "snp_1","snp_10",..: 1 12 23 34 45 47 48 49 50 2 ...
 $ chr : int  1 1 1 1 1 1 1 1 1 1 ...
 $ pos : num  2105324 2105467 2106094 2108138 2109262 ...
 $ gene: Factor w/ 12 levels "gene1","gene2",..: 1 1 1 1 1 1 1 1 1 2 ...
> 
> head(mapdat30)
    SNP chr     pos  gene
1 snp_1   1 2105324 gene1
2 snp_2   1 2105467 gene1
3 snp_3   1 2106094 gene1
4 snp_4   1 2108138 gene1
5 snp_5   1 2109262 gene1
6 snp_6   1 2110294 gene1
> 
> 
> 
> cleanEx()

detaching ‘package:kinship2’, ‘package:quadprog’, ‘package:Matrix’

> nameEx("dat50")
> ### * dat50
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phenodata
> ### Title: dat50 data set adapted from FFBSKAT R package
> ### Aliases: genocovdata genodata kin phenodata snpdata
> 
> ### ** Examples
> 
> data(dat50)
> 
> str(phenodata)
'data.frame':	66 obs. of  4 variables:
 $ id   : num  1 2 3 4 5 6 7 8 9 10 ...
 $ sex  : int  0 1 0 0 0 1 0 1 1 0 ...
 $ age  : int  80 77 56 44 75 79 75 82 77 76 ...
 $ trait: num  -1.763 -1.423 -0.805 0.268 -1.334 ...
> plotKinship2(2*kin)
> str(genodata)
 chr [1:66, 1:50] "1/1" "1/1" "1/1" "1/2" "1/2" "1/1" "1/1" "1/1" "1/1" ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:66] "1" "2" "3" "4" ...
  ..$ : chr [1:50] "s1" "s2" "s3" "s4" ...
> 
> genodata[1:5, 1:5]
  s1    s2    s3    s4    s5   
1 "1/1" "1/1" "1/1" "1/1" "1/1"
2 "1/1" "1/1" "1/1" "1/2" "1/1"
3 "1/1" "1/1" "1/1" "2/2" "1/1"
4 "1/2" "1/1" "1/1" "1/2" "1/2"
5 "1/2" "1/1" "1/1" "1/1" "1/1"
> str(genocovdata)
 int [1:66, 1:50] 0 0 0 1 1 0 0 0 0 0 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:66] "1" "2" "3" "4" ...
  ..$ : chr [1:50] "s1" "s2" "s3" "s4" ...
> 
> genocovdata[1:5, 1:5]
  s1 s2 s3 s4 s5
1  0  0  0  0  0
2  0  0  0  1  0
3  0  0  0  2  0
4  1  0  0  1  1
5  1  0  0  0  0
> 
> # compare with the genotypes
> genodata[1:5, 1:5]
  s1    s2    s3    s4    s5   
1 "1/1" "1/1" "1/1" "1/1" "1/1"
2 "1/1" "1/1" "1/1" "1/2" "1/1"
3 "1/1" "1/1" "1/1" "2/2" "1/1"
4 "1/2" "1/1" "1/1" "1/2" "1/2"
5 "1/2" "1/1" "1/1" "1/1" "1/1"
> str(snpdata)
'data.frame':	50 obs. of  4 variables:
 $ name    : chr  "s1" "s2" "s3" "s4" ...
 $ chrom   : int  1 1 1 1 1 1 1 1 1 1 ...
 $ position: num  2105324 2105467 2106094 2108138 2109262 ...
 $ gene    : chr  "gene1" "gene1" "gene1" "gene1" ...
> 
> head(snpdata)
   name chrom position  gene
2    s1     1  2105324 gene1
6    s2     1  2105467 gene1
10   s3     1  2106094 gene1
11   s4     1  2108138 gene1
15   s5     1  2109262 gene1
20   s6     1  2110294 gene1
> 
> 
> 
> cleanEx()
> nameEx("loadMulticPhen")
> ### * loadMulticPhen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadMulticPhen
> ### Title: Load the complete data set from R package multic
> ### Aliases: loadMulticPhen
> 
> ### ** Examples
> 
> dat <- loadMulticPhen()
> dim(dat)
[1] 1200   10
> 
> data(dat30)
> dim(dat30)
[1] 174  10
> 
> 
> 
> cleanEx()
> nameEx("matchIdNames")
> ### * matchIdNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchIdNames
> ### Title: Match ID column names
> ### Aliases: matchIdNames
> 
> ### ** Examples
> 
> # @ http://helix.nih.gov/Documentation/solar-6.6.2-doc/91.appendix_1_text.html#load
> #solar> help file-pedigree                                                       
> #
> # The pedigree file consists of one record for each individual in the data
> # set.  Each record must include the following fields:
> #
> #    ego ID, father ID, mother ID, sex
> #
> # In addition, a family ID is required when ego IDs are not unique across
> # the entire data set.  If the data set contains genetically identical
> # individuals, an MZ-twin ID must be present (as described below).  If an
> # analysis of household effects is planned, a household ID can be included
> # (also described below).
> #
> # The default field names are ID, FA, MO, SEX, FAMID, MZTWIN, and HHID.
> #
> 
> fields <- c("id", "ID", "ids",
+   "famid", "FAMID", "famidity",
+   "mo", "MO", "mother", "MOTHER", "MOtrait", "motherland",
+   "fa", "FA", "father", "FATHER", "fatherland",
+   "sex", "SEX", "sexo")
> 
> ### ID
> # pass: id, ID
> # filter: ids
> grep("^id$|^ID$", fields, value = TRUE)
[1] "id" "ID"
> 
> ### FAMID
> grep("^famid$|^FAMID$", fields, value = TRUE)
[1] "famid" "FAMID"
> 
> ### MO
> grep("^mo$|^MO$|^mother$|^MOTHER$", fields, value = TRUE)
[1] "mo"     "MO"     "mother" "MOTHER"
> 
> ### FA
> grep("^fa$|^FA$|^father$|^FATHER$", fields, value = TRUE)
[1] "fa"     "FA"     "father" "FATHER"
> 
> ### SEX
> grep("^sex$|^SEX$", fields, value = TRUE)
[1] "sex" "SEX"
> 
> 
> 
> 
> cleanEx()
> nameEx("matchMapNames")
> ### * matchMapNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchMapNames
> ### Title: Match map column names
> ### Aliases: matchMapNames
> 
> ### ** Examples
> 
> data(dat50)
>  matchMapNames(names(snpdata))
    name position    chrom 
   "SNP"    "pos"    "chr" 
> 
> 
> 
> cleanEx()
> nameEx("package.file")
> ### * package.file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: package.file
> ### Title: Alternative to system.file
> ### Aliases: package.file
> 
> ### ** Examples
> 
> mibddir <- package.file("extdata", "solarOutput", "solarMibds", package = "solarius")
> mibddir
[1] "/Users/admin/Documents/Projects/rsnps/revdep/checks.noindex/solarius/old/solarius.Rcheck/solarius/extdata/solarOutput/solarMibds"
> 
> list.files(mibddir)
 [1] "mibd.2.0.gz" "mibd.2.1.gz" "mibd.2.2.gz" "mibd.2.3.gz" "mibd.2.4.gz"
 [6] "mibd.2.5.gz" "mibd.5.0.gz" "mibd.5.1.gz" "mibd.5.2.gz" "mibd.5.3.gz"
[11] "mibd.5.4.gz" "mibd.5.5.gz"
> 
> 
> 
> cleanEx()
> nameEx("plotKinship2")
> ### * plotKinship2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotKinship2
> ### Title: Plot the double kinship matrix
> ### Aliases: histKinship2 imageKinship2 plotKinship2
> 
> ### ** Examples
> 
> # load `kin` kinship matrix from `dat50` data set
> data(dat50)
> kin2 <- 2* kin # double kinship matrix
> 
> plotKinship2(kin2) # equivalent to `imageKinship2(kin2)`
> 
> plotKinship2(kin2, "hist") # equivalent to `histKinship2(kin2)`
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> 
> 
> cleanEx()
> nameEx("plotPed")
> ### * plotPed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPed
> ### Title: Plot the pedigree
> ### Aliases: plotPed
> 
> ### ** Examples
> 
> data(dat30)
> plotPed(dat30, 1)
Loading required package: kinship2
Loading required package: Matrix
Warning: package ‘Matrix’ was built under R version 3.5.2
Loading required package: quadprog
Warning: package ‘quadprog’ was built under R version 3.5.2
> 
> 
> 
> cleanEx()

detaching ‘package:kinship2’, ‘package:quadprog’, ‘package:Matrix’

> nameEx("plotQQManh")
> ### * plotQQManh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotManh
> ### Title: Plot the association results
> ### Aliases: plotManh plotQQ
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(dat50)
> ##D 
> ##D assoc <- solarAssoc(trait ~ 1, phenodata,
> ##D  snpdata = genodata, snpmap = snpdata, kinship = kin)
> ##D 
> ##D plotManh(assoc) # equivalent to plot(assoc)
> ##D 
> ##D plotQQ(assoc) # equivalent to plot(assoc, "qq")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotRes")
> ### * plotRes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRes
> ### Title: Plot the residuals of a polygenic model
> ### Aliases: plotRes plotResQQ
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ### basic (univariate) polygenic model
> ##D mod <- solarPolygenic(trait1 ~ age + sex, dat30)
> ##D 
> ##D plotRes(mod)
> ##D 
> ##D plotResQQ(mod)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("snp2solar")
> ### * snp2solar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: snpdata2solar
> ### Title: Export snp genotypes, genotype covariates and amp to SOLAR
> ### Aliases: snpcovdata2solar snpdata2solar snpmap2solar
> 
> ### ** Examples
> 
> # Example of `snp.genocov` file:
> # id,nGTypes,snp_s1,snp_s2,...
> # 1,50,0,0,...
> # 2,50,0,0,...
> 
> # Example of `snp.geno-list` file:
> # snp_s1
> # snp_s2
> # ...
> 
> 
> 
> cleanEx()
> nameEx("solarAssoc")
> ### * solarAssoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solarAssoc
> ### Title: Run association analysis.
> ### Aliases: solarAssoc
> 
> ### ** Examples
> 
> ### load data
> data(dat50)
> dim(phenodata)
[1] 66  4
> dim(kin)
[1] 66 66
> dim(genodata)
[1] 66 50
> 
> ## Not run: 
> ##D ### basic (univariate) association model with a custom kinship
> ##D mod <- solarAssoc(trait~age+sex, phenodata,
> ##D   kinship = kin, snpdata = genodata)
> ##D mod$snpf # table of results for 50 SNPs
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("solarMultipoint")
> ### * solarMultipoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solarMultipoint
> ### Title: Run multipoint linkage analysis.
> ### Aliases: solarMultipoint
> 
> ### ** Examples
> 
> ### load phenotype data
> data(dat30)
> 
> ### load marker data
> mibddir <- system.file('extdata', 'solarOutput',
+   'solarMibdsCsv', package = 'solarius')
> list.files(mibddir)
 [1] "mibd.2.0.gz" "mibd.2.1.gz" "mibd.2.2.gz" "mibd.2.3.gz" "mibd.2.4.gz"
 [6] "mibd.2.5.gz" "mibd.5.0.gz" "mibd.5.1.gz" "mibd.5.2.gz" "mibd.5.3.gz"
[11] "mibd.5.4.gz" "mibd.5.5.gz"
> 
> ## Not run: 
> ##D ### basic (univariate) linkage model
> ##D mod <- solarMultipoint(trait1 ~ 1, dat30,
> ##D   mibddir = mibddir, chr = 5)
> ##D mod$lodf # table of results (LOD scores) (the highest 3.56)
> ##D 
> ##D ### basic (bivariate) linkage model
> ##D mod <- solarMultipoint(trait1 + trait2 ~ 1, dat30,
> ##D   mibddir = mibddir, chr = 5)
> ##D mod$lodf # table of results (LOD scores) (the highest 2.74)
> ##D 
> ##D ### two-pass linkage model
> ##D mod <- solarMultipoint(trait1 ~ 1, dat30,
> ##D   mibddir = mibddir, chr = 5,
> ##D   multipoint.options = "3")
> ##D mod$lodf # table of results (LOD scores, 1 pass) (the highest 2.74)
> ##D mod$lodf2 # table of results (LOD scores, 2 pass) (all nearly zero LOD scores)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("solarPolygenic")
> ### * solarPolygenic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solarPolygenic
> ### Title: Run polygenic analysis.
> ### Aliases: solarPolygenic
> 
> ### ** Examples
> 
> ### load data and check out ID names
> data(dat30)
> matchIdNames(names(dat30))
     id   famid      mo      fa     sex 
   "ID" "FAMID"    "MO"    "FA"   "SEX" 
> 
> ## Not run: 
> ##D ### basic (univariate) polygenic model
> ##D mod <- solarPolygenic(trait1 ~ age + sex, dat30)
> ##D 
> ##D ### (univariate) polygenic model with parameters
> ##D mod <- solarPolygenic(trait1 ~ age + sex, dat30, covtest = TRUE)
> ##D mod$cf # look at test statistics for covariates
> ##D 
> ##D ### basic (bivariate) polygenic model
> ##D mod <- solarPolygenic(trait1 + trait2 ~ 1, dat30)
> ##D mod$vcf # look at variance components
> ##D 
> ##D ### (bivariate) polygenic model with trait specific covariates
> ##D mod <- solarPolygenic(trait1 + trait2 ~ age + sex(trait1), dat30)
> ##D 
> ##D ### (bivariate) polygenic model with a test of the genetic correlation
> ##D mod <- solarPolygenic(trait1 + trait2 ~ 1, dat30, polygenic.options = "-testrhog")
> ##D mod$lf # look at a p-value of the test
> ##D 
> ##D ### transforms for (univariate) polygenic model
> ##D mod <- mod <- solarPolygenic(trait1 ~ 1, dat30, transforms = "log")
> ##D 
> ##D ### transforms for (bivariate) polygenic model
> ##D mod <- solarPolygenic(trait1 + trait2 ~ 1, dat30,
> ##D    transforms = c(trait1 = "log", trait2 = "inormal"))
> ##D 
> ##D ### SOLAR format of introducing covariates
> ##D mod <- solarPolygenic(traits = "trait1", covlist = "age^1,2,3#sex", data =  dat30)
> ##D mod$cf # 8 covariate terms will be printed
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("transformTrait")
> ### * transformTrait
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transformTrait
> ### Title: Transform a trait.
> ### Aliases: transformTrait
> 
> ### ** Examples
> 
> library(plyr)
> library(ggplot2)
Warning: package ‘ggplot2’ was built under R version 3.5.2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:solarius’:

    annotate

> 
> data(dat30)
> dat <- mutate(dat30,
+    inormal_trait1 = transformTrait(trait1, "inormal"))
> 
> ggplot(dat, aes(trait1)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> ggplot(dat, aes(inormal_trait1)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’, ‘package:plyr’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.424 0.412 21.606 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
